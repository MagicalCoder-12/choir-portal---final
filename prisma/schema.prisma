// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

model Song {
  id                   String   @id @default(cuid())
  title                String
  alternateTitles      String   // JSON array stored as string
  lyrics               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  startingSongRelations WeeklySong[] @relation("StartingSong")
  musicSongRelations    WeeklySong[] @relation("MusicSong")
  worshipSongRelations  WeeklySong[] @relation("WorshipSong")

  @@map("songs")
}

model WeeklySong {
  id           String   @id @default(cuid())
  weekStart    DateTime // Start of the week (Sunday)
  startingSong String   // Song ID
  musicSong    String   // Song ID
  worshipSong  String   // Song ID
  userId       String?  // Admin who set this week's songs
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  startingSongRelation Song @relation("StartingSong", fields: [startingSong], references: [id])
  musicSongRelation    Song @relation("MusicSong", fields: [musicSong], references: [id])
  worshipSongRelation  Song @relation("WorshipSong", fields: [worshipSong], references: [id])
  user                 User? @relation(fields: [userId], references: [id])

  @@map("weekly_songs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "admin"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  weeklySongs WeeklySong[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}